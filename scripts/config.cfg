[MAIN]
# Enable debug log mode (default: False)
#debug=
# Enable info log mode (default: False)
#info=
# Enable quiet/warning log mode (default: False)
#quiet=

[basic]
# Print build overview incl. dependencies (full paths) (default: False)
#dry-run=
# Print build overview incl. dependencies (short paths) (default: False)
#dry-run-short=
# Print build environment and (expected) build procedure that will be performed (default: False)
#extended-dry-run=
# Ignore errors that occur during dry run (default: True; disable with --disable-extended-dry-run-ignore-errors)
#extended-dry-run-ignore-errors=
# Force to rebuild software even if it's already installed (i.e. if it can be found as module), and skipping check for OS dependencies (default: False)
#force=
# Ignore locks that prevent two identical installations running in parallel (default: False)
#ignore-locks=
# Submit the build as a job (default: False)
#job=
# Directory to store lock files (should be on a shared filesystem); None implies .locks subdirectory of software installation directory
#locks-dir=
# Redirect main log to stdout (default: False)
#logtostdout=
# Print list of missing modules for dependencies of specified easyconfigs (default: False)
#missing-modules=
# Only build listed blocks (type comma-separated list)
#only-blocks=
# Rebuild software, even if module already exists (don't skip OS dependencies checks) (default: False)
#rebuild=
# Enable dependency resolution, using easyconfigs in specified paths (type pathsep-separated list; default: )
#robot=
# Additional paths to consider by robot for easyconfigs (--robot paths get priority) (type pathsep-separated list; default: /app/software/EasyBuild/4.5.0/easybuild/easyconfigs)
#robot-paths=
# Additional locations to consider in --search (next to --robot and --robot-paths paths) (type pathsep-separated list; default: )
#search-paths=
# Skip existing software (useful for installing additional packages) (default: False)
#skip=
# Stop the installation after certain step (type choice; default: source) (choices: fetch, ready, source, patch, prepare, configure, build, test, install, extensions, postiter, postproc, sanitycheck, cleanup, module, permissions, package, testcases)
#stop=
# Set strictness level (type choice; default: warn) (choices: ignore, warn, error)
#strict=

[config]
# Show all supported module naming schemes (default: False)
#avail-module-naming-schemes=
# Show all supported module tools (default: False)
#avail-modules-tools=
# Show all repository types (incl. non-usable) (default: False)
#avail-repositories=
# Temporary build path (default: /home/scicomp/.local/easybuild/build)
#buildpath=
# Location where container recipe & image will be stored (default: /home/scicomp/.local/easybuild/containers)
#containerpath=
# List of environment variables that hold the base paths for which user-specific modules will be installed relative to (type comma-separated list; default: HOME)
#envvars-user-modules=
# List of (glob patterns for) paths to files specifying metadata for external modules (INI format) (type comma-separated list)
#external-modules-metadata=
# Location of Python module with hook implementations (type str)
#hooks=
# Directory names to ignore when searching for files/dirs (type comma-separated list; default: .git,.svn)
#ignore-dirs=
# Location(s) of extra or customized easyblocks (type comma-separated list; default: )
#include-easyblocks=
# Location(s) of extra or customized module naming schemes (type comma-separated list; default: )
#include-module-naming-schemes=
# Location(s) of extra or customized toolchains or toolchain components (type comma-separated list; default: )
#include-toolchains=
# Install path for software and modules (default: /home/scicomp/.local/easybuild)
#installpath=
# Install path for modules (if None, combine --installpath and --subdir-modules)
#installpath-modules=
# Install path for software (if None, combine --installpath and --subdir-software)
#installpath-software=
# Backend to use for submitting jobs (type choice; default: GC3Pie) (choices: GC3Pie, PbsPython, Slurm)
#job-backend=
# Directory name and format of the log file (type comma-separated tuple; default: easybuild,easybuild-%(name)s-%(version)s-%(date)s.%(time)s.log)
#logfile-format=
# Use depends_on (Lmod 7.6.1+) for dependencies in all generated modules (implies recursive unloading of modules). (default: False)
#module-depends-on=
# Include 'extensions' statement in generated module file (Lua syntax only) (default: False)
#module-extensions=
# Module naming scheme to use (default: EasyBuildMNS)
#module-naming-scheme=
# Syntax to be used for module files (type choice; default: Lua) (choices: Lua, Tcl)
#module-syntax=
# Extend supported module classes (For more info on the default classes, use --show-default-moduleclasses) (type comma-separated list; default: base,astro,bio,cae,chem,compiler,data,debugger,devel,geo,ide,lang,lib,math,mpi,numlib,perf,quantum,phys,system,toolchain,tools,vis)
#moduleclasses=
# Path to file containing footer to be added to all generated module files
#modules-footer=
# Path to file containing header to be added to all generated module files
#modules-header=
# Modules tool to use (type choice; default: Lmod) (choices: EnvironmentModules, EnvironmentModulesC, EnvironmentModulesTcl, Lmod)
#modules-tool=
# Packaging naming scheme choice (type choice; default: EasyBuildPNS) (choices: EasyBuildPNS)
#package-naming-scheme=
# The destination path for the packages built by package-tool (default: /home/scicomp/.local/easybuild/packages)
#packagepath=
# Change prefix for buildpath, installpath, sourcepath and repositorypath (used prefix for defaults /home/scicomp/.local/easybuild)
#prefix=
# Enable generating of modules that unload recursively. (default: False)
#recursive-module-unload=
# Repository type, using repositorypath (type choice; default: FileRepository) (choices: FileRepository, GitRepository)
#repository=
# Repository path, used by repository (is passed as list of arguments to create the repository instance). For more info, use --avail-repositories. (type comma-separated list; default: /home/scicomp/.local/easybuild/ebfiles_repo)
#repositorypath=
# Path(s) to where sources should be downloaded (string, colon-separated) (default: /home/scicomp/.local/easybuild/sources)
#sourcepath=
# Installpath subdir for modules (default: modules)
#subdir-modules=
# Installpath subdir for software (default: software)
#subdir-software=
# Base path of user-specific modules relative to --envvars-user-modules
#subdir-user-modules=
# Suffix for module files install path (default: all)
#suffix-modules-path=
# Path to where a job should place the output (to be set within jobscript)
#testoutput=
# Log directory where temporary log files are stored
#tmp-logdir=
# Directory to use for temporary storage
#tmpdir=

[container]
# Build container image (requires sudo privileges!) (default: False)
#container-build-image=
# Configuration for container image (type <class 'str'>)
#container-config=
# Container image format (type choice) (choices: ext3, sandbox, sif, squashfs)
#container-image-format=
# Custom name for container image (defaults to name of easyconfig)
#container-image-name=
# Template recipe for container image (type <class 'str'>)
#container-template-recipe=
# Temporary directory where container image is built
#container-tmpdir=
# Type of container recipe/image to create (type choice; default: singularity) (choices: docker, singularity)
#container-type=

[easyconfig]
# Create index for files in specified directory
#create-index=
# Fix use of deprecated functionality in specified easyconfig files. (default: False)
#fix-deprecated-easyconfigs=
# Ignore index when searching for files (default: False)
#ignore-index=
# Maximum age for index before it is considered stale (in seconds) (type <class 'int'>; default: 604800)
#index-max-age=
# Inject checksums of specified type for sources/patches into easyconfig file(s) (type choice; default: sha256) (choices: adler32, crc32, md5, sha1, sha256, sha512, size)
#inject-checksums=
# Mode to use when checking whether local variables follow the recommended naming scheme ('log': only log warnings (no printed messages); 'warn': print warnings; 'error': fail with an error) (type choice; default: warn) (choices: error, log, warn)
#local-var-naming-check=

[github]
# Try to add labels to PR based on files changed (type <class 'int'>)
#add-pr-labels=
# Runs checks to see whether the given easyconfigs are ready to be contributed back (default: False)
#check-contrib=
# Check status of GitHub integration, and report back (default: False)
#check-github=
# Run a style check on the given easyconfigs (default: False)
#check-style=
# Clean up easyconfig files for pull request (default: True; disable with --disable-cleanup-easyconfigs)
#cleanup-easyconfigs=
# Close pull request (type <class 'int'>)
#close-pr=
# Custom close message for pull request closed with --close-pr;  (type <class 'str'>)
#close-pr-msg=
# Close reason for pull request closed with --close-pr; supported values: archived, inactive, obsolete, retest (type <class 'str'>)
#close-pr-reasons=
# Dump test report to specified path (default: test_report.md)
#dump-test-report=
# Obtain easyconfigs from specified PR (type comma-separated list; default: )
#from-pr=
# Path to Git working directories for EasyBuild repositories (type <class 'str'>)
#git-working-dirs-path=
# GitHub organization (type <class 'str'>)
#github-org=
# GitHub username (type <class 'str'>)
#github-user=
# Include easyblocks from specified PR (type comma-separated list; default: )
#include-easyblocks-from-pr=
# Install GitHub token (requires --github-user) (default: False)
#install-github-token=
# List pull requests (type <class 'str'>; default: open,created,desc)
#list-prs=
# Merge pull request (type <class 'int'>)
#merge-pr=
# Create new branch in GitHub in preparation for a PR (default: False)
#new-branch-github=
# Open a new pull request (default: False)
#new-pr=
# Open a new pull request from branch in GitHub (type <class 'str'>)
#new-pr-from-branch=
# Branch name to use for new PRs; '<timestamp>_new_pr_<name><version>' if unspecified (type <class 'str'>)
#pr-branch-name=
# Commit message for new/updated pull request created with --new-pr (type <class 'str'>)
#pr-commit-msg=
# Description for new pull request created with --new-pr (type <class 'str'>)
#pr-descr=
# Target account for new PRs (type <class 'str'>; default: easybuilders)
#pr-target-account=
# Target branch for new PRs (type <class 'str'>; default: develop)
#pr-target-branch=
# Target repository for new/updating PRs (default: auto-detect based on provided files) (type <class 'str'>)
#pr-target-repo=
# Title for new pull request created with --new-pr (type <class 'str'>)
#pr-title=
# Preview a new pull request (default: False)
#preview-pr=
# Review specified pull request (type <class 'int'>)
#review-pr=
# Regex used to filter out easyconfigs to diff against in --review-pr
#review-pr-filter=
# Maximum number of easyconfigs to diff against in --review-pr (type <class 'int'>)
#review-pr-max=
# Sync branch with current 'develop' branch (type <class 'str'>)
#sync-branch-with-develop=
# Sync pull request with current 'develop' branch (type <class 'int'>)
#sync-pr-with-develop=
# Regex used to filter out variables in environment dump of test report
#test-report-env-filter=
# Update specified branch in GitHub (type <class 'str'>)
#update-branch-github=
# Update an existing pull request (type <class 'int'>)
#update-pr=
# Upload full test report as a gist on GitHub (default: False)
#upload-test-report=

[informative]
# Show all constants that can be used in configuration files (default: False)
#avail-cfgfile-constants=
# Show all constants that can be used in easyconfigs (default: False)
#avail-easyconfig-constants=
# Show all license constants that can be used in easyconfigs (default: False)
#avail-easyconfig-licenses=
# Show all easyconfig parameters (include easyblock-specific ones by using -e) (default: False)
#avail-easyconfig-params=
# Show all template names and template constants that can be used in easyconfigs. (default: False)
#avail-easyconfig-templates=
# Show list of known hooks (default: False)
#avail-hooks=
# Show options for toolchain (type str)
#avail-toolchain-opts=
# Check for version conflicts in dependency graphs (default: False)
#check-conflicts=
# Check presence and version of (required and optional) EasyBuild dependencies (default: False)
#check-eb-deps=
# Create dependency graph
#dep-graph=
# Dump source script to set up build environment based on toolchain/dependencies (default: False)
#dump-env-script=
# Path to easystack file in YAML format, specifying details of a software stack
#easystack=
# Print location to EasyBuild log file of last (failed) session (default: False)
#last-log=
# Show list of available easyblocks (type choice; default: simple) (choices: simple, detailed)
#list-easyblocks=
# Show list of installed software (type choice; default: simple) (choices: simple, detailed)
#list-installed-software=
# Show list of supported software (type choice; default: simple) (choices: simple, detailed)
#list-software=
# Show list of known toolchains (default: False)
#list-toolchains=
# Search for easyconfig files in the robot search path, print full paths
#search=
# Search for easyconfig files in the robot search path, print only filenames
#search-filename=
# Search for easyconfig files in the robot search path, print short paths
#search-short=
# Show current EasyBuild configuration (only non-default + selected settings) (default: False)
#show-config=
# Show list of default config files (default: False)
#show-default-configfiles=
# Show default module classes with description (default: False)
#show-default-moduleclasses=
# Show contents of specified easyconfig(s) (default: False)
#show-ec=
# Show current EasyBuild configuration (all settings) (default: False)
#show-full-config=
# Show system information relevant to EasyBuild (default: False)
#show-system-info=
# Terse output (machine-readable) (default: False)
#terse=

[job]
# Configuration file for job backend
#job-backend-config=
# Number of cores to request per job (type int)
#job-cores=
# Type of dependency to set between jobs (default depends on job backend) (type choice) (choices: abort_on_error, always_run)
#job-deps-type=
# Maximum number of concurrent jobs (queued and running, 0 = unlimited) (type int; default: 0)
#job-max-jobs=
# Maximum walltime for jobs (in hours) (type int; default: 24)
#job-max-walltime=
# Output directory for jobs (default: current directory) (default: /home/scicomp)
#job-output-dir=
# Interval between polls for status of jobs (in seconds) (type <class 'float'>; default: 30.0)
#job-polling-interval=
# Target resource for jobs
#job-target-resource=

[override]
# Accept EULA for specified software [DEPRECATED, use --accept-eula-for instead!] (type comma-separated list; default: )
#accept-eula=
# Accept EULA for specified software (type comma-separated list; default: )
#accept-eula-for=
accept-eula-for=Intel-oneAPI

# Include dummy toolchain in minimal toolchain searches [DEPRECATED, use --add-system-to-minimal-toolchains instead!) (default: False)
#add-dummy-to-minimal-toolchains=
# Include system toolchain in minimal toolchain searches (default: False)
#add-system-to-minimal-toolchains=
# List of software names for which to allow loaded modules in initial environment (type comma-separated list; default: EasyBuild)
#allow-loaded-modules=
# Allow mismatch of modules tool and definition of 'module' function (default: False)
#allow-modules-tool-mismatch=
# Allow using of EasyBuild as root (NOT RECOMMENDED!) (default: False)
#allow-use-as-root-and-accept-consequences=
# Back up an existing module file, if any. Only works when using --module-only
#backup-modules=
# Comma-separated list of shared libraries (names, file names, or paths) which are not allowed to be linked in any installed binary/library (type comma-separated list)
#banned-linked-shared-libs=
# Action to take when defined $EBROOT* environment variables are found for which there is no matching loaded module; supported values: error, ignore, unset, warn (default: warn)
#check-ebroot-env-vars=
# Cleanup build dir after successful installation. (default: True; disable with --disable-cleanup-builddir)
#cleanup-builddir=
# Cleanup tmp dir after successful run. (default: True; disable with --disable-cleanup-tmpdir)
#cleanup-tmpdir=
# Colorize output (type choice; default: auto) (choices: auto, always, never)
#color=
# Also consider archived easyconfigs (default: False)
#consider-archived-easyconfigs=
# Generate container recipe/image (default: False)
#containerize=
# Copy specified easyconfig(s) to specified location (default: False)
#copy-ec=
# Path to CUDA cache dir to use if enabled. Defaults to a path inside the build dir. (type <class 'str'>)
#cuda-cache-dir=
# Maximum size of the CUDA cache (in MiB) used for JIT compilation of PTX code. Leave value empty to let EasyBuild choose a value or '0' to disable the cache (type <class 'int'>)
#cuda-cache-maxsize=
# List of CUDA compute capabilities to use when building GPU software; values should be specified as digits separated by a dot, for example: 3.5,5.0,7.2 (type comma-separated list)
#cuda-compute-capabilities=
cuda-compute-capabilities=6.1

# Run Lmod modules tool commands in debug module (default: False)
#debug-lmod=
# Specify default optimisation level (type choice; default: defaultopt) (choices: noopt, lowopt, defaultopt, opt)
#default-opt-level=
# Run pretending to be (future) version, to test removal of deprecated code.
#deprecated=
# Detect loaded EasyBuild-generated modules, act accordingly; supported values: error, ignore, purge, unload, warn (default: warn)
#detect-loaded-modules=
# Enable including of development log messages (default: False)
#devel=
# Timeout for initiating downloads (in seconds) (type <class 'float'>)
#download-timeout=
# Reformat easyconfigs using autopep8 when dumping them (default: False)
#dump-autopep8=
# easyblock to use for processing the spec file or dumping the options
#easyblock=
# Enforce availability of checksums for all sources/patches, so they can be verified (default: False)
#enforce-checksums=
# Define the env command to use when fixing shebangs (default: /usr/bin/env)
#env-for-shebang=
# Allow experimental code (with behaviour that can be changed/removed at any given time). (default: False)
#experimental=
# List of extra modules to load after setting up the build environment (type comma-separated list)
#extra-modules=
# Allow downloading sources ignoring OS and modules tool dependencies, implies --stop=fetch, --ignore-osdeps and ignore modules tool (default: False)
#fetch=
# List of dependencies that you do *not* want to install with EasyBuild, because equivalent OS packages are installed. (e.g. --filter-deps=zlib,ncurses) (type comma-separated list)
#filter-deps=
# List of easyconfigs (given as glob patterns) to *ignore* when given on command line or auto-selected when building with --from-pr. (e.g. --filter-ecs=*intel*) (type comma-separated list)
#filter-ecs=
# List of names of environment variables that should *not* be defined/updated by module files generated by EasyBuild (type comma-separated list)
#filter-env-vars=
# Use fixed naming scheme for installation directories (default: True; disable with --disable-fixed-installdir-naming-scheme)
#fixed-installdir-naming-scheme=
# Force re-downloading of sources and/or patches, even if they are available already in source path (type choice; default: sources) (choices: all, patches, sources)
#force-download=
# Generate a develop module file, implies --force if disabled (default: True; disable with --disable-generate-devel-module)
#generate-devel-module=
# Group to be used for software installations (only verified, not set)
#group=
# Enable group write permissions on installation directory after installation (default: False)
#group-writable-installdir=
# Install 'hidden' module file(s) by prefixing their version with '.' (default: False)
#hidden=
# Comma separated list of dependencies that you want automatically hidden, (e.g. --hide-deps=zlib,ncurses) (type comma-separated list)
#hide-deps=
# Comma separated list of toolchains that you want automatically hidden, (e.g. --hide-toolchains=GCCcore) (type comma-separated list)
#hide-toolchains=
# Set extra HTTP header FIELDs when downloading files from URL PATterns. To not log sensitive values, specify a file containing newline separated FIELDs. e.g. "^https://www.example.com::/path/to/headers.txt" or "client[A-z0-9]*.example.com': ['Authorization: Basic token']".
#http-header-fields-urlpat=
# Ignore failing checksum verification (default: False)
#ignore-checksums=
# Ignore any listed OS dependencies (default: False)
#ignore-osdeps=
# Ignore a failing test step (default: False)
#ignore-test-failure=
# Don't check the server certificate against the available certificate authorities. (default: False)
#insecure-download=
# Install latest known version of easybuild (default: False)
#install-latest-eb-release=
# Automatically create symlinks for lib/ pointing to lib64/ if the former is missing (default: True; disable with --disable-lib-lib64-symlink)
#lib-lib64-symlink=
# Fallback in sanity check to lib64/ equivalent for missing libraries (default: True; disable with --disable-lib64-fallback-sanity-check)
#lib64-fallback-sanity-check=
# Automatically create symlinks for lib64/ pointing to lib/ if the former is missing (default: True; disable with --disable-lib64-lib-symlink)
#lib64-lib-symlink=
# Maximum ratio for failures to allow when adjusting permissions (type float; default: 0.5)
#max-fail-ratio-adjust-permissions=
# Minimal build environment to define when using system toolchain, specified as a comma-separated list that defines a mapping between name of environment variable and its value separated by a colon (':') (default: CC:gcc,CXX:g++)
#minimal-build-env=
# Use minimal toolchain when resolving dependencies (default: False)
#minimal-toolchains=
# Only generate module file(s); skip all steps except for module, prepare, ready, postiter, sanitycheck (default: False)
#module-only=
# Check version of modules tool being used (default: True; disable with --disable-modules-tool-version-check)
#modules-tool-version-check=
# Template for MPI commands (template keys: %(nr_ranks)s, %(cmd)s)
#mpi-cmd-template=
# Run MPI tests (when relevant) (default: True; disable with --disable-mpi-tests)
#mpi-tests=
# Set architecture optimization, overriding native architecture optimizations
#optarch=
# Set output format (type choice; default: txt) (choices: txt, rst)
#output-format=
# Control output style; auto implies using Rich if available to produce rich output, with fallback to basic colored output (type choice; default: auto) (choices: auto, basic, no_color, rich)
#output-style=
# Specify (maximum) level of parallellism used during build procedure (type int)
#parallel=
# Install list of extensions in parallel (if supported) (default: False)
#parallel-extensions-install=
# Create installation directory before submitting build jobs (default: True; disable with --disable-pre-create-installdir)
#pre-create-installdir=
# Does the build/installation in a test directory located in $HOME/easybuildinstall (default: False)
#pretend=
# Set read-only permissions on installation directory after installation (default: False)
#read-only-installdir=
# Remove ghost installation directories when --force or --rebuild is used, rather than just warning about them (default: False)
#remove-ghost-install-dirs=
# Comma-separated list of shared libraries (names, file names, or paths) which must be linked in all installed binaries/libraries (type comma-separated list)
#required-linked-shared-libs=
# Enable use of RPATH for linking with libraries (default: False)
#rpath=
# List of regex patterns to use for filtering out RPATH paths (type comma-separated list)
#rpath-filter=
# Path(s) to be prepended when linking with RPATH (string, colon-separated)
#rpath-override-dirs=
# Only run sanity check (module is expected to be installed already (default: False)
#sanity-check-only=
# Set the generated module as default (default: False)
#set-default-module=
# Set group ID bit on newly created directories (default: False)
#set-gid-bit=
# Show progress bar in terminal output (default: True; disable with --disable-show-progress-bar)
#show-progress-bar=
# Silence specified deprecation warnings (type comma-separated list)
#silence-deprecation-warnings=
# Skip installation of extensions (default: False)
#skip-extensions=
# Skip running test cases (default: False)
#skip-test-cases=
# Skip running the test step (e.g. unit tests) (default: False)
#skip-test-step=
# Set sticky bit on newly created directories (default: False)
#sticky-bit=
# Location root directory of system, prefix for standard paths like /usr/lib and /usr/include
#sysroot=
# Provide more information in output to stdout on progress (default: False)
#trace=
# umask to use (e.g. '022'); non-user write permissions on install directories are removed
#umask=
# Run in unit test mode (default: False)
#unit-testing-mode=
# Update modules tool cache file(s) after generating module file (default: False)
#update-modules-tool-cache=
# Enable use of ccache to speed up compilation, with specified cache dir (type <class 'str'>; default: False)
#use-ccache=
# Use existing modules when resolving dependencies with minimal toolchains (default: False)
#use-existing-modules=
# Enable use of f90cache to speed up compilation, with specified cache dir (type <class 'str'>; default: False)
#use-f90cache=
# Verify whether filename of specified easyconfigs matches with contents (default: False)
#verify-easyconfig-filenames=
# Wait for lock to be released; 0 implies no waiting (exit with an error if the lock already exists), non-zero value specified waiting interval [DEPRECATED: use --wait-on-lock-interval and --wait-on-lock-limit instead] (type <class 'int'>)
#wait-on-lock=
# Wait interval (in seconds) to use when waiting for existing lock to be removed (type <class 'int'>; default: 60)
#wait-on-lock-interval=
# Maximum amount of time (in seconds) to wait until lock is released (0 means no waiting at all, exit with error; -1 means no waiting limit, keep waiting) (type <class 'int'>; default: 0)
#wait-on-lock-limit=
# Zip logs that are copied to install directory, using specified command (default: gzip)
#zip-logs=

[package]
# Enabling packaging (default: False)
#package=
# Package release iteration number (default: 1)
#package-release=
# Packaging tool to use (default: fpm)
#package-tool=
# Extra options for packaging tool (default: '')
#package-tool-options=
# Type of package to generate (default: rpm)
#package-type=

[regtest]
# Collect all the xmls inside the given directory and generate a single file
#aggregate-regtest=
# Enable regression test mode (default: False)
#regtest=
# Set output directory for test-run
#regtest-output-dir=
# Specify this option if you want to prevent parallel build (default: False)
#sequential=

[software]
# Specify additional search and build parameters (can be used multiple times); for example: versionprefix=foo or patches=one.patch,two.patch)
#amend=
# Enable mapping of (sub)toolchains when --try-toolchain(-version) is used (default: True; disable with --disable-map-toolchains)
#map-toolchains=
# Search and build software with given name and version (type comma-separated list)
#software=
# Search and build software with given name
#software-name=
# Search and build software with given version
#software-version=
# Search and build with given toolchain (name and version) (type comma-separated list)
#toolchain=
# Search and build with given toolchain name
#toolchain-name=
# Search and build with given toolchain version
#toolchain-version=
# Try to specify additional search and build parameters (can be used multiple times); for example: versionprefix=foo or patches=one.patch,two.patch) (USE WITH CARE!)
#try-amend=
# Ignore versionsuffix differences when --try-update-deps is used (default: False)
#try-ignore-versionsuffixes=
# Try to search and build software with given name and version (USE WITH CARE!) (type comma-separated list)
#try-software=
# Try to search and build software with given name (USE WITH CARE!)
#try-software-name=
# Try to search and build software with given version (USE WITH CARE!)
#try-software-version=
# Try to search and build with given toolchain (name and version) (USE WITH CARE!) (type comma-separated list)
#try-toolchain=
# Try to search and build with given toolchain name (USE WITH CARE!)
#try-toolchain-name=
# Try to search and build with given toolchain version (USE WITH CARE!)
#try-toolchain-version=
# Try to update versions of the dependencies of an easyconfig based on what is available in the robot path (default: False)
#try-update-deps=

[unittest]
# Log to this file in unittest mode
#unittest-file=

